{"version":3,"sources":["weather/WeatherCard.js","weather/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["WeatherCard","temp","humidity","pressure","weathermood","name","speed","country","sunset","useState","weatherIcon","setWeatherIcon","useEffect","date","Date","timeString","getHours","getMinutes","getSeconds","className","Math","floor","parseInt","toLocaleString","Weather","searchVal","setSearchVal","tamp","setTemp","getWeatherInfo","a","fetch","res","json","resData","console","log","main","weather","wind","sys","type","id","placeholder","autoFocus","value","onChange","e","target","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4d70d4a.chunk.js","sourcesContent":["import React, { useState , useEffect } from 'react'\r\n\r\nconst WeatherCard = ({temp, humidity, pressure, weathermood, name, speed, country, sunset}) => {\r\n\r\n    const [weatherIcon , setWeatherIcon] = useState(\"\")\r\n\r\n    useEffect(() => {\r\n        if (weathermood) {\r\n          switch (weathermood) {\r\n            case \"Clouds\":\r\n              setWeatherIcon(\"wi-day-cloudy\");\r\n              break;\r\n            case \"Haze\":\r\n              setWeatherIcon(\"wi-fog\");\r\n              break;\r\n            case \"Clear\":\r\n              setWeatherIcon(\"wi-day-sunny\");\r\n              break;\r\n            case \"Mist\":\r\n              setWeatherIcon(\"wi-dust\");\r\n              break;\r\n    \r\n            default:\r\n              setWeatherIcon(\"wi-day-sunny\");\r\n              break;\r\n          }\r\n        }\r\n      }, [weathermood]);\r\n\r\n// converting sunset second time into normal time format\r\n\r\nconst sec = sunset;\r\nconst date = new Date(sec*1000)\r\nconst timeString = `${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`\r\n\r\n    return (\r\n        <>\r\n           <article className=\"widget\">\r\n        <div className=\"weatherIcon\">\r\n          <i className={`wi ${weatherIcon}`}></i>\r\n        </div>\r\n\r\n        <div className=\"weatherInfo\">\r\n          <div className=\"temperature\">\r\n            <span>{Math.floor(parseInt(temp)-272)}&deg;C</span>\r\n          </div>\r\n\r\n          <div className=\"description\">\r\n            <div className=\"weatherCondition\">{weathermood}</div>\r\n            <div className=\"place\">{name} , {country}</div>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"date\">{new Date().toLocaleString()}</div>\r\n\r\n        {/* four column section */}\r\n        <div className=\"extra-temp\">\r\n          <div className=\"temp-info-minmax\">\r\n            <div className=\"two-sided-section\">\r\n              <p>\r\n                <i className={\"wi wi-sunset\"}></i>\r\n              </p>\r\n              <p className=\"extra-info-leftside\">\r\n                {timeString} pm <br />\r\n                sunset\r\n              </p>\r\n            </div>\r\n            <div className=\"two-sided-section\">\r\n              <p>\r\n                <i className={\"wi wi-humidity\"}></i>\r\n              </p>\r\n              <p className=\"extra-info-leftside\">\r\n                {humidity} <br />\r\n                humidity\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"weather-extra-info\">\r\n            <div className=\"two-sided-section\">\r\n              <p>\r\n                <i className={\"wi wi-wind-beaufort-1\"}></i>\r\n              </p>\r\n              <p className=\"extra-info-leftside\">\r\n                {speed} <br />\r\n                wind speed\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"two-sided-section\">\r\n              <p>\r\n                <i className={\"wi wi-barometer\"}></i>\r\n              </p>\r\n              <p className=\"extra-info-leftside\">\r\n                {pressure} <br />\r\n                mmHg\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </article>  \r\n        </>\r\n    )\r\n}\r\n\r\nexport default WeatherCard\r\n","import React , {useState , useEffect} from \"react\";\r\nimport \"../App.css\";\r\nimport WeatherCard from \"./WeatherCard\";\r\n\r\nconst Weather = () => {\r\n\r\n    const [searchVal, setSearchVal] = useState(\"pune\")\r\n    const [tamp , setTemp] = useState({})\r\n\r\n    const getWeatherInfo = async ()=>{\r\n        const res = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${searchVal}&appid=02a06edb101779892acb1187f05219d1`)\r\n        const resData = await res.json()\r\n        console.log(resData)\r\n\r\nconst {temp , humidity , pressure} = resData.main\r\nconst { main:weathermood} = resData.weather[0]\r\nconst {name} = resData\r\nconst {speed} = resData.wind\r\nconst {country , sunset} = resData.sys\r\n\r\nconst newWeatherInfo = {\r\ntemp, humidity, pressure, weathermood, name, speed, country, sunset\r\n}\r\n\r\nsetTemp(newWeatherInfo)\r\n  }\r\n\r\n\r\n\r\nuseEffect(() => {\r\n  getWeatherInfo()\r\n}, [])\r\n\r\n  return (\r\n    <>\r\n      <div className=\"wrap\">\r\n        <div className=\"search\">\r\n          <input\r\n            type=\"text\"\r\n            id=\"search\"\r\n            placeholder=\"City Name\"\r\n            className=\"searchTerm\"\r\n            autoFocus\r\n            value={searchVal}\r\nonChange={(e)=>setSearchVal(e.target.value)}\r\n          />\r\n          <button className=\"searchButton\" type=\"button\" onClick={getWeatherInfo}>\r\n            <i className=\"fas fa-search-location\"></i>\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* weather card */}\r\n     <WeatherCard {...tamp} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Weather\r\n","import React from 'react'\nimport Weather from './weather/Weather'\n\n\nfunction App() {\n  return (\n    <div>\n      <Weather />\n    </div>\n  )\n}\n\nexport default App\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}